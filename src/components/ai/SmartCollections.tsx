
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Folder, 
  Sparkles,
  Plus,
  Eye,
  ArrowRight,
  Zap,
  Filter,
  Shuffle
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface SmartCollection {
  id: string;
  name: string;
  description: string;
  itemCount: number;
  confidence: number;
  category: string;
  autoGenerated: boolean;
  lastUpdated: Date;
}

interface SmartCollectionsProps {
  className?: string;
}

export const SmartCollections: React.FC<SmartCollectionsProps> = ({ className }) => {
  const [collections, setCollections] = useState<SmartCollection[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const { toast } = useToast();

  useEffect(() => {
    generateSmartCollections();
  }, []);

  const generateSmartCollections = async () => {
    setIsGenerating(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const mockCollections: SmartCollection[] = [
        {
          id: '1',
          name: 'React & Frontend Development',
          description: 'Components, hooks, and modern React patterns',
          itemCount: 23,
          confidence: 95,
          category: 'Technology',
          autoGenerated: true,
          lastUpdated: new Date()
        },
        {
          id: '2',
          name: 'Learning Resources',
          description: 'Tutorials, courses, and educational content',
          itemCount: 18,
          confidence: 88,
          category: 'Education',
          autoGenerated: true,
          lastUpdated: new Date()
        },
        {
          id: '3',
          name: 'Productivity & Tools',
          description: 'Apps, workflows, and productivity techniques',
          itemCount: 15,
          confidence: 82,
          category: 'Productivity',
          autoGenerated: true,
          lastUpdated: new Date()
        },
        {
          id: '4',
          name: 'AI & Machine Learning',
          description: 'Latest AI developments and ML resources',
          itemCount: 12,
          confidence: 90,
          category: 'Technology',
          autoGenerated: true,
          lastUpdated: new Date()
        }
      ];

      setCollections(mockCollections);
      
      toast({
        title: "Smart Collections Generated!",
        description: "AI has organized your content into intelligent collections.",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const categories = ['all', ...Array.from(new Set(collections.map(c => c.category)))];
  const filteredCollections = selectedCategory === 'all' 
    ? collections 
    : collections.filter(c => c.category === selectedCategory);

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 90) return 'text-green-600';
    if (confidence >= 80) return 'text-yellow-600';
    return 'text-red-600';
  };

  return (
    <div className={className}>
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Folder className="h-5 w-5 text-primary" />
            Smart Collections
            <Badge variant="secondary">AI-Powered</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Controls */}
          <div className="flex flex-wrap gap-2 items-center">
            <Button
              onClick={generateSmartCollections}
              disabled={isGenerating}
              className="gap-2"
            >
              {isGenerating ? (
                <>
                  <div className="w-4 h-4 animate-spin rounded-full border-2 border-primary border-t-transparent" />
                  Analyzing...
                </>
              ) : (
                <>
                  <Sparkles className="h-4 w-4" />
                  Regenerate Collections
                </>
              )}
            </Button>
            
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="px-3 py-2 text-sm border rounded"
            >
              {categories.map(category => (
                <option key={category} value={category}>
                  {category === 'all' ? 'All Categories' : category}
                </option>
              ))}
            </select>
          </div>

          {/* Collections Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {filteredCollections.map((collection) => (
              <Card key={collection.id} className="hover:shadow-md transition-shadow">
                <CardContent className="p-4">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-2">
                      <div className="p-2 bg-primary/10 rounded-lg">
                        <Folder className="h-4 w-4 text-primary" />
                      </div>
                      {collection.autoGenerated && (
                        <Badge variant="outline" className="text-xs">
                          <Zap className="h-3 w-3 mr-1" />
                          Auto
                        </Badge>
                      )}
                    </div>
                    <span className={`text-sm font-medium ${getConfidenceColor(collection.confidence)}`}>
                      {collection.confidence}%
                    </span>
                  </div>
                  
                  <h3 className="font-semibold mb-2">{collection.name}</h3>
                  <p className="text-sm text-muted-foreground mb-3">{collection.description}</p>
                  
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-muted-foreground">
                      {collection.itemCount} items
                    </span>
                    <Badge variant="secondary">{collection.category}</Badge>
                  </div>
                  
                  <div className="flex gap-2 mt-3">
                    <Button size="sm" variant="outline" className="flex-1 gap-1">
                      <Eye className="h-3 w-3" />
                      View
                    </Button>
                    <Button size="sm" className="flex-1 gap-1">
                      <ArrowRight className="h-3 w-3" />
                      Open
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Quick Actions */}
          <div className="space-y-3">
            <h4 className="font-medium text-sm">Quick Actions</h4>
            <div className="flex gap-2">
              <Button variant="outline" size="sm" className="gap-1">
                <Plus className="h-3 w-3" />
                Create Collection
              </Button>
              <Button variant="outline" size="sm" className="gap-1">
                <Shuffle className="h-3 w-3" />
                Merge Similar
              </Button>
              <Button variant="outline" size="sm" className="gap-1">
                <Filter className="h-3 w-3" />
                Auto-Organize
              </Button>
            </div>
          </div>

          {/* Tips */}
          <div className="bg-blue-50 dark:bg-blue-950 p-3 rounded-lg text-sm">
            <h4 className="font-medium mb-1">ðŸ“š Collections Tips:</h4>
            <ul className="text-muted-foreground space-y-1">
              <li>â€¢ AI analyzes content patterns to create meaningful groups</li>
              <li>â€¢ Collections update automatically as you add new content</li>
              <li>â€¢ Higher confidence scores indicate stronger content relationships</li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
